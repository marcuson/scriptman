version: "3"

dotenv: ["_build/build.env"]

tasks:
  build-debug:
    desc: Build with debug symbols for the current platform.
    summary: |
      Build with debug symbols for the current platform.
    cmds:
      - >
        go build
        -gcflags="all=-N -l"
        -ldflags='-X marcuson/scriptman/internal/cliapp.Version={{.SCRIPTMAN_VERSION  | default "X.Y.Z"}}'
        -o ./_build/debug_bin ./cmd/scriptman
    sources:
      - cmd/**/*.go
      - internal/**/*.go
    generates:
      - _build/debug_bin

  build-*-*:
    vars:
      SCRIPTMAN_OS: '{{index .MATCH 0}}'
      SCRIPTMAN_ARCH: '{{index .MATCH 1}}'
    desc: Production build. See summary for more info.
    summary: |
      Production build. First wildcard is one of supported GOOS options. Second wildcard is one of supported GOARCH options.
    cmds:
      - >
        GOOS={{.SCRIPTMAN_OS}} GOARCH={{.SCRIPTMAN_ARCH}} go build
        -gcflags="all=-N -l"
        -ldflags="-X marcuson/scriptman/internal/cliapp.Version={{.SCRIPTMAN_VERSION  | default "X.Y.Z"}} -s -w"
        -o ./_build/dist/sman-{{.SCRIPTMAN_OS}}-{{.SCRIPTMAN_ARCH}} ./cmd/scriptman
    sources:
      - cmd/**/*.go
      - internal/**/*.go
    generates:
      - _build/dist/sman-{{.SCRIPTMAN_OS}}-{{.SCRIPTMAN_ARCH}}

  build-all:
    desc: Production build for all supported platforms.
    summary: |
      Production build for all supported platforms.
    deps:
      - build-linux-amd64
      - build-linux-arm
      - build-windows-amd64

  clean:
    desc: Clean temp artifacts.
    summary: |
      Clean temp artifacts.
    cmds:
      - go run ./scripts/clean

  run:
    desc: Run app on current platform.
    summary: |
      Run app on current platform.
    cmds:
      - go run ./cmd/scriptman --help

  set-version:
    desc: Set version for next build.
    summary: |
      Set version for next build.
    cmds:
      - >
        go run ./scripts/set-version {{.VER | default "X.Y.Z"}}

  generate:
    desc: Automatically generate support files based on directives.
    summary: |
      Automatically generate support files based on directives.
    cmds:
      - docker run -v "{{.ROOT_DIR}}":/src -w /src vektra/mockery --all

  test:
    desc: Run all tests.
    summary: |
      Run all tests.
    cmds:
      - go test ./...
